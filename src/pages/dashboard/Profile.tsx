import React, { useState, useRef, useEffect } from 'react';
import DashboardLayout from '../../components/dashboard/DashboardLayout';
import { 
  UserIcon, 
  ShieldCheckIcon, 
  PencilIcon, 
  CheckIcon, 
  XMarkIcon, 
  EyeIcon, 
  ArrowPathIcon,
  PhoneIcon,
  BriefcaseIcon,
  LockClosedIcon,
  FingerPrintIcon,
  ComputerDesktopIcon,
  ClipboardDocumentIcon
} from '@heroicons/react/24/outline';
import InputField from '../../components/form/InputField';

type SectionId = 'basic-info' | 'security' | 'two-factor' | 'active-sessions';

interface MenuTab {
  id: SectionId;
  name: string;
  shortName?: string; // Optional shorter name for small screens
  icon: React.ForwardRefExoticComponent<React.SVGProps<SVGSVGElement>>;
}

interface Session {
  id: number;
  device: string;
  lastActive: string;
  ip: string;
  isCurrent: boolean;
}

const Profile: React.FC = () => {
  // State for form values
  const [firstName, setFirstName] = useState('John');
  const [lastName, setLastName] = useState('Doe');
  const [email, setEmail] = useState('john.doe@example.com');
  const [phone, setPhone] = useState('+1 (555) 123-4567');
  const [position, setPosition] = useState('Administrator');
  const [sex, setSex] = useState('Male');
  
  // State for password fields
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  
  // State for showing/hiding passwords
  const [] = useState(false);
  const [] = useState(false);
  const [] = useState(false);
  
  // State for edit mode
  const [editingBasicInfo, setEditingBasicInfo] = useState(false);
  
  // State for form submission
  const [basicInfoSuccess, setBasicInfoSuccess] = useState(false);
  const [passwordSuccess, setPasswordSuccess] = useState(false);
  
  // State for active tab
  const [activeTab, setActiveTab] = useState<SectionId>('basic-info');
  
  // Refs for scrolling to sections
  const basicInfoRef = useRef<HTMLDivElement>(null);
  const securityRef = useRef<HTMLDivElement>(null);
  const twoFactorRef = useRef<HTMLDivElement>(null);
  const activeSessionsRef = useRef<HTMLDivElement>(null);
  
  // State for 2FA modal
  const [show2FAModal, setShow2FAModal] = useState(false);
  const [twoFAStep, setTwoFAStep] = useState(1);
  const [verificationCode, setVerificationCode] = useState('');
  const [twoFAEnabled, setTwoFAEnabled] = useState(false);
  const [recoveryCodesVisible, setRecoveryCodesVisible] = useState(false);
  
  // Mock recovery codes
  const recoveryCodes = [
    'A1B2-C3D4-E5F6',
    'G7H8-I9J0-K1L2',
    'M3N4-O5P6-Q7R8',
    'S9T0-U1V2-W3X4',
    'Y5Z6-A7B8-C9D0',
    'E1F2-G3H4-I5J6',
    'K7L8-M9N0-O1P2',
    'Q3R4-S5T6-U7V8',
    'W9X0-Y1Z2-A3B4',
    'C5D6-E7F8-G9H0'
  ];
  
  // Mock QR code URL - in a real app, this would be generated by the backend
  const qrCodeUrl = 'https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=otpauth://totp/Coinley:john.doe@example.com?secret=JBSWY3DPEHPK3PXP&issuer=Coinley';
  
  // State for sessions
  const [sessions, setSessions] = useState<Session[]>([
    {
      id: 1,
      device: 'Windows 10 - Chrome',
      lastActive: 'Just now',
      ip: '192.168.1.1',
      isCurrent: true
    },
    {
      id: 2,
      device: 'macOS - Safari',
      lastActive: '2 days ago',
      ip: '192.168.1.2',
      isCurrent: false
    },
    {
      id: 3,
      device: 'iOS - Mobile App',
      lastActive: '5 days ago',
      ip: '192.168.1.3',
      isCurrent: false
    }
  ]);
  
  const [sessionActionLoading, setSessionActionLoading] = useState<number | null>(null);
  const [revokeAllLoading, setRevokeAllLoading] = useState(false);
  const [sessionActionSuccess, setSessionActionSuccess] = useState(false);
  
  // Handle 2FA modal open
  const open2FAModal = () => {
    setShow2FAModal(true);
    setTwoFAStep(1);
    setVerificationCode('');
  };
  
  // Handle 2FA modal close
  const close2FAModal = () => {
    setShow2FAModal(false);
    setTwoFAStep(1);
    setVerificationCode('');
    setRecoveryCodesVisible(false);
  };
  
  // Handle verification code submission
  const handleVerificationSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // In a real app, you would validate the code with the backend
    // For this demo, we'll just accept any 6-digit code
    if (verificationCode.length === 6 && /^\d+$/.test(verificationCode)) {
      setTwoFAStep(3); // Move to recovery codes step
    } else {
      alert('Please enter a valid 6-digit verification code');
    }
  };
  
  // Handle 2FA setup completion
  const complete2FASetup = () => {
    setTwoFAEnabled(true);
    close2FAModal();
  };
  
  // Copy recovery codes to clipboard
  const copyRecoveryCodes = () => {
    navigator.clipboard.writeText(recoveryCodes.join('\n'))
      .then(() => {
        alert('Recovery codes copied to clipboard');
      })
      .catch(err => {
        console.error('Failed to copy recovery codes: ', err);
      });
  };
  
  // Menu tabs with short names for responsive display
  const menuTabs: MenuTab[] = [
    { id: 'basic-info', name: 'Basic Information', shortName: 'Basic Info', icon: UserIcon },
    { id: 'security', name: 'Security', icon: ShieldCheckIcon },
    { id: 'two-factor', name: 'Two-Factor Authentication', shortName: '2FA', icon: FingerPrintIcon },
    { id: 'active-sessions', name: 'Active Sessions', shortName: 'Sessions', icon: ComputerDesktopIcon },
  ];
  
  // Scroll to section when tab changes
  useEffect(() => {
    const scrollToSection = (ref: React.RefObject<HTMLDivElement | null>) => {
      if (ref && ref.current) {
        ref.current.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    };
    
    switch (activeTab) {
      case 'basic-info':
        scrollToSection(basicInfoRef);
        break;
      case 'security':
        scrollToSection(securityRef);
        break;
      case 'two-factor':
        scrollToSection(twoFactorRef);
        break;
      case 'active-sessions':
        scrollToSection(activeSessionsRef);
        break;
    }
  }, [activeTab]);
  
  // Handle basic info form submission
  const handleBasicInfoSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Here you would typically make an API call to update the user's information
    
    // Simulate successful update
    setBasicInfoSuccess(true);
    setEditingBasicInfo(false);
    
    // Reset success message after 3 seconds
    setTimeout(() => {
      setBasicInfoSuccess(false);
    }, 3000);
  };
  
  // Handle password form submission
  const handlePasswordSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Here you would typically make an API call to update the user's password
    
    // Validate passwords match
    if (newPassword !== confirmPassword) {
      alert('New passwords do not match');
      return;
    }
    
    // Simulate successful update
    setPasswordSuccess(true);
    setCurrentPassword('');
    setNewPassword('');
    setConfirmPassword('');
    
    // Reset success message after 3 seconds
    setTimeout(() => {
      setPasswordSuccess(false);
    }, 3000);
  };
  
  // Cancel editing basic info
  const cancelEditBasicInfo = () => {
    setEditingBasicInfo(false);
    // Reset to original values if needed
  };
  
  // Handle revoking a session
  const handleRevokeSession = (sessionId: number) => {
    setSessionActionLoading(sessionId);
    
    // Simulate API call with a timeout
    setTimeout(() => {
      // Filter out the revoked session
      setSessions(sessions.filter(session => session.id !== sessionId));
      setSessionActionLoading(null);
      
      // Show success message
      setSessionActionSuccess(true);
      setTimeout(() => {
        setSessionActionSuccess(false);
      }, 3000);
    }, 1000);
  };
  
  // Handle revoking all other sessions
  const handleRevokeAllOtherSessions = () => {
    setRevokeAllLoading(true);
    
    // Simulate API call with a timeout
    setTimeout(() => {
      // Keep only the current session
      setSessions(sessions.filter(session => session.isCurrent));
      setRevokeAllLoading(false);
      
      // Show success message
      setSessionActionSuccess(true);
      setTimeout(() => {
        setSessionActionSuccess(false);
      }, 3000);
    }, 1500);
  };
  
  // Animation keyframes and style definitions
  const animationStyles = `
    @keyframes fade-in-up {
      0% {
        opacity: 0;
        transform: translateY(20px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes pop-in {
      0% {
        opacity: 0;
        transform: scale(0.95) translateY(20px);
      }
      50% {
        transform: scale(1.02) translateY(0);
      }
      100% {
        opacity: 1;
        transform: scale(1) translateY(0);
      }
    }
    
    .animate-fade-in-up {
      animation: fade-in-up 0.6s ease-out forwards;
    }
    
    .animate-pop-in {
      animation: pop-in 0.35s cubic-bezier(0.16, 1, 0.3, 1) forwards;
    }
    
    .animation-delay-50 {
      animation-delay: 0.05s;
    }
    
    .animation-delay-100 {
      animation-delay: 0.1s;
    }
    
    .animation-delay-150 {
      animation-delay: 0.15s;
    }
    
    .animation-delay-200 {
      animation-delay: 0.2s;
    }
    
    .animation-delay-250 {
      animation-delay: 0.25s;
    }
    
    .animation-delay-300 {
      animation-delay: 0.3s;
    }
    
    .animation-delay-350 {
      animation-delay: 0.35s;
    }
    
    .animation-delay-400 {
      animation-delay: 0.4s;
    }
    
    .animation-delay-450 {
      animation-delay: 0.45s;
    }
    
    .animation-delay-500 {
      animation-delay: 0.5s;
    }
  `;
  
  return (
    <DashboardLayout>
      <style>{animationStyles}</style>

      <div className="space-y-6">
        {/* Page Header */}
        <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 animate-fade-in-up opacity-0">
          <div className="flex items-center mb-4">
            <UserIcon className="h-6 w-6 text-primary mr-3" />
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white">Profile Settings</h2>
          </div>
          <p className="text-gray-600 dark:text-gray-300">
            Manage your personal information and account security.
          </p>
        </div>
        
        {/* Main Content with Left Menu */}
        <div className="flex flex-col lg:flex-row gap-6">
          {/* Left Menu - Horizontal on medium screens, vertical on large screens */}
          <div className="w-full lg:w-64 bg-white dark:bg-gray-800 shadow rounded-lg p-4 h-fit lg:sticky lg:top-24 animate-fade-in-up animation-delay-100 opacity-0">
            {/* Horizontal scrollable menu for medium screens */}
            <div className="block lg:hidden overflow-x-auto pb-2">
              <div className="flex space-x-2 min-w-max">
                {menuTabs.map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`flex items-center px-3 py-2 text-sm font-medium rounded-md whitespace-nowrap transition-colors ${
                      activeTab === tab.id
                        ? 'bg-primary text-white'
                        : 'text-gray-600 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700'
                    }`}
                  >
                    <tab.icon
                      className={`h-5 w-5 ${
                        activeTab === tab.id ? 'text-white' : 'text-gray-500 dark:text-gray-400'
                      }`}
                    />
                    <span className="ml-2">{tab.shortName || tab.name}</span>
                  </button>
                ))}
              </div>
            </div>
            
            {/* Vertical menu for large screens */}
            <nav className="hidden lg:block w-full">
              <ul className="space-y-2 w-full">
                {menuTabs.map((tab) => (
                  <li key={tab.id} className="w-full">
                    <button
                      onClick={() => setActiveTab(tab.id)}
                      className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors ${
                        activeTab === tab.id
                          ? 'bg-primary text-white'
                          : 'text-gray-600 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700'
                      }`}
                    >
                      <tab.icon
                        className={`flex-shrink-0 h-5 w-5 ${
                          activeTab === tab.id ? 'text-white' : 'text-gray-500 dark:text-gray-400'
                        }`}
                      />
                      <span className="ml-3 text-left truncate">
                        {tab.name}
                      </span>
                    </button>
                  </li>
                ))}
              </ul>
            </nav>
          </div>
          
          {/* Right Content */}
          <div className="flex-1 space-y-6">
            {/* Basic Info Section */}
            <div ref={basicInfoRef} id="basic-info" className="bg-white dark:bg-gray-800 shadow rounded-lg overflow-hidden animate-fade-in-up animation-delay-150 opacity-0">
              <div className="p-6 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
                <div className="flex items-center">
                  <UserIcon className="h-5 w-5 text-gray-500 dark:text-gray-400 mr-2" />
                  <h3 className="text-lg font-medium text-gray-900 dark:text-white">Basic Information</h3>
                </div>
                {!editingBasicInfo && (
                  <button
                    onClick={() => setEditingBasicInfo(true)}
                    className="inline-flex items-center px-3 py-1.5 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none"
                  >
                    <PencilIcon className="h-4 w-4 mr-1.5" />
                    Edit
                  </button>
                )}
              </div>
              
              <div className="p-6">
                {basicInfoSuccess && (
                  <div className="mb-4 p-3 bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-400 rounded-md flex items-center">
                    <CheckIcon className="h-5 w-5 mr-2" />
                    Your profile information has been updated successfully.
                  </div>
                )}
                
                <form onSubmit={handleBasicInfoSubmit}>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6 animate-fade-in-up animation-delay-200 opacity-0">
                    <InputField
                      id="firstName"
                      name="firstName"
                      type="text"
                      label="First Name"
                      icon={<UserIcon className="h-5 w-5" />}
                      value={firstName}
                      onChange={(e) => setFirstName(e.target.value)}
                      disabled={!editingBasicInfo}
                      placeholder="Enter your first name"
                    />
                    
                    <InputField
                      id="lastName"
                      name="lastName"
                      type="text"
                      label="Last Name"
                      icon={<UserIcon className="h-5 w-5" />}
                      value={lastName}
                      onChange={(e) => setLastName(e.target.value)}
                      disabled={!editingBasicInfo}
                      placeholder="Enter your last name"
                    />
                    
                    <InputField
                      id="email"
                      name="email"
                      type="email"
                      label="Email Address"
                      icon={<EyeIcon className="h-5 w-5" />}
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      disabled={!editingBasicInfo}
                      placeholder="Enter your email address"
                    />
                    
                    <InputField
                      id="phone"
                      name="phone"
                      type="tel"
                      label="Phone Number"
                      icon={<PhoneIcon className="h-5 w-5" />}
                      value={phone}
                      onChange={(e) => setPhone(e.target.value)}
                      disabled={!editingBasicInfo}
                      placeholder="Enter your phone number"
                    />
                    
                    <InputField
                      id="position"
                      name="position"
                      type="text"
                      label="Position"
                      icon={<BriefcaseIcon className="h-5 w-5" />}
                      value={position}
                      onChange={(e) => setPosition(e.target.value)}
                      disabled={true}
                      placeholder="Enter your position"
                    />
                    
                    <div className="w-full">
                      <label htmlFor="sex" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Sex
                      </label>
                      <div className="relative">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                          <UserIcon className="h-5 w-5 text-gray-500 dark:text-gray-400" />
                        </div>
                        <select
                          id="sex"
                          value={sex}
                          onChange={(e) => setSex(e.target.value)}
                          disabled={!editingBasicInfo}
                          className={`w-full pl-10 pr-4 py-2 rounded-md ${
                            !editingBasicInfo 
                              ? 'bg-gray-100 dark:bg-gray-700 border-gray-200 dark:border-gray-700' 
                              : 'border-gray-300 dark:border-gray-600 dark:bg-gray-800'
                          }`}
                        >
                          <option value="Male">Male</option>
                          <option value="Female">Female</option>
                          <option value="Other">Other</option>
                          <option value="Prefer not to say">Prefer not to say</option>
                        </select>
                      </div>
                    </div>
                  </div>
                  
                  {editingBasicInfo && (
                    <div className="mt-6 flex justify-end space-x-3 animate-fade-in-up animation-delay-300 opacity-0">
                      <button
                        type="button"
                        onClick={cancelEditBasicInfo}
                        className="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none"
                      >
                        <XMarkIcon className="h-4 w-4 mr-1.5" />
                        Cancel
                      </button>
                      <button
                        type="submit"
                        className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary/90 focus:outline-none"
                      >
                        <CheckIcon className="h-4 w-4 mr-1.5" />
                        Save Changes
                      </button>
                    </div>
                  )}
                </form>
              </div>
            </div>
            
            {/* Security Section */}
            <div ref={securityRef} id="security" className="bg-white dark:bg-gray-800 shadow rounded-lg overflow-hidden animate-fade-in-up animation-delay-200 opacity-0">
              <div className="p-6 border-b border-gray-200 dark:border-gray-700">
                <div className="flex items-center">
                  <ShieldCheckIcon className="h-5 w-5 text-gray-500 dark:text-gray-400 mr-2" />
                  <h3 className="text-lg font-medium text-gray-900 dark:text-white">Security</h3>
                </div>
              </div>
              
              <div className="p-6">
                {passwordSuccess && (
                  <div className="mb-4 p-3 bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-400 rounded-md flex items-center">
                    <CheckIcon className="h-5 w-5 mr-2" />
                    Your password has been updated successfully.
                  </div>
                )}
                
                <form onSubmit={handlePasswordSubmit}>
                  <div className="space-y-4 animate-fade-in-up animation-delay-250 opacity-0">
                    <InputField
                      id="currentPassword"
                      name="currentPassword"
                      type="password"
                      label="Current Password"
                      icon={<LockClosedIcon className="h-5 w-5" />}
                      value={currentPassword}
                      onChange={(e) => setCurrentPassword(e.target.value)}
                      required
                      placeholder="Enter your current password"
                    />
                    
                    <InputField
                      id="newPassword"
                      name="newPassword"
                      type="password"
                      label="New Password"
                      icon={<LockClosedIcon className="h-5 w-5" />}
                      value={newPassword}
                      onChange={(e) => setNewPassword(e.target.value)}
                      required
                      placeholder="Enter your new password"
                    />
                    <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                      Password must be at least 8 characters and include a number and a special character.
                    </p>
                    
                    <InputField
                      id="confirmPassword"
                      name="confirmPassword"
                      type="password"
                      label="Confirm New Password"
                      icon={<LockClosedIcon className="h-5 w-5" />}
                      value={confirmPassword}
                      onChange={(e) => setConfirmPassword(e.target.value)}
                      required
                      placeholder="Confirm your new password"
                    />
                  </div>
                  
                  <div className="mt-6 flex justify-end animate-fade-in-up animation-delay-300 opacity-0">
                    <button
                      type="submit"
                      className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary/90 focus:outline-none"
                    >
                      <ArrowPathIcon className="h-4 w-4 mr-1.5" />
                      Update Password
                    </button>
                  </div>
                </form>
              </div>
            </div>
            
            {/* Two-Factor Authentication */}
            <div ref={twoFactorRef} id="two-factor" className="bg-white dark:bg-gray-800 shadow rounded-lg overflow-hidden animate-fade-in-up animation-delay-200 opacity-0">
              <div className="p-6 border-b border-gray-200 dark:border-gray-700">
                <div className="flex items-center">
                  <FingerPrintIcon className="h-5 w-5 text-gray-500 dark:text-gray-400 mr-2" />
                  <h3 className="text-lg font-medium text-gray-900 dark:text-white">Two-Factor Authentication</h3>
                </div>
              </div>
              
              <div className="p-6">
                <div className="flex items-center justify-between animate-fade-in-up animation-delay-250 opacity-0">
                  <div>
                    <p className="text-sm text-gray-700 dark:text-gray-300">
                      Add an extra layer of security to your account by enabling two-factor authentication.
                    </p>
                    <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                      We'll send you a verification code via SMS or authenticator app when you sign in.
                    </p>
                  </div>
                  {twoFAEnabled ? (
                    <div className="flex items-center">
                      <span className="mr-3 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400">
                        Enabled
                      </span>
                      <button
                        type="button"
                        className="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none"
                        onClick={() => setTwoFAEnabled(false)}
                      >
                        Disable 2FA
                      </button>
                    </div>
                  ) : (
                    <button
                      type="button"
                      className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary/90 focus:outline-none"
                      onClick={open2FAModal}
                    >
                      Enable 2FA
                    </button>
                  )}
                </div>
                
                {twoFAEnabled && (
                  <div className="mt-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg animate-fade-in-up animation-delay-300 opacity-0">
                    <h4 className="text-sm font-medium text-gray-900 dark:text-white mb-2">
                      Two-factor authentication is enabled
                    </h4>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      Your account is now protected with an additional layer of security. When signing in, you'll need to provide a verification code from your authenticator app.
                    </p>
                  </div>
                )}
              </div>
            </div>
            
            {/* Login Sessions */}
            <div ref={activeSessionsRef} id="active-sessions" className="bg-white dark:bg-gray-800 shadow rounded-lg overflow-hidden animate-fade-in-up animation-delay-200 opacity-0">
              <div className="p-6 border-b border-gray-200 dark:border-gray-700">
                <div className="flex items-center">
                  <ComputerDesktopIcon className="h-5 w-5 text-gray-500 dark:text-gray-400 mr-2" />
                  <h3 className="text-lg font-medium text-gray-900 dark:text-white">Active Sessions</h3>
                </div>
              </div>
              
              <div className="p-6">
                {sessionActionSuccess && (
                  <div className="mb-4 p-3 bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-400 rounded-md flex items-center">
                    <CheckIcon className="h-5 w-5 mr-2" />
                    Session(s) successfully revoked.
                  </div>
                )}
                
                <div className="space-y-4 animate-fade-in-up animation-delay-250 opacity-0">
                  {sessions.length === 0 ? (
                    <div className="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg text-center">
                      <p className="text-sm text-gray-500 dark:text-gray-400">
                        No active sessions found other than your current session.
                      </p>
                    </div>
                  ) : (
                    sessions.map((session) => (
                      <div key={session.id} className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                        <div>
                          <p className="text-sm font-medium text-gray-900 dark:text-white">
                            {session.device}
                          </p>
                          <p className="text-xs text-gray-500 dark:text-gray-400">
                            Last active: {session.lastActive} • IP: {session.ip}
                          </p>
                        </div>
                        <div className="flex items-center">
                          {session.isCurrent ? (
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400">
                              Current
                            </span>
                          ) : (
                            <button
                              type="button"
                              className="text-sm text-red-600 hover:text-red-500 dark:text-red-400 dark:hover:text-red-300 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
                              onClick={() => handleRevokeSession(session.id)}
                              disabled={sessionActionLoading !== null}
                            >
                              {sessionActionLoading === session.id ? (
                                <>
                                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-red-600 dark:text-red-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                  </svg>
                                  Revoking...
                                </>
                              ) : (
                                'Revoke'
                              )}
                            </button>
                          )}
                        </div>
                      </div>
                    ))
                  )}
                </div>
                
                {sessions.filter(session => !session.isCurrent).length > 0 && (
                  <div className="mt-4 animate-fade-in-up animation-delay-300 opacity-0">
                    <button
                      type="button"
                      className="text-sm text-red-600 hover:text-red-500 dark:text-red-400 dark:hover:text-red-300 font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
                      onClick={handleRevokeAllOtherSessions}
                      disabled={revokeAllLoading || sessionActionLoading !== null}
                    >
                      {revokeAllLoading ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-red-600 dark:text-red-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Revoking all sessions...
                        </>
                      ) : (
                        'Revoke All Other Sessions'
                      )}
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* 2FA Setup Modal */}
      {show2FAModal && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity" aria-hidden="true">
              <div className="absolute inset-0 bg-gray-500 dark:bg-gray-900 opacity-75"></div>
            </div>
            
            <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            
            <div className="inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
              <div className="bg-white dark:bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="sm:flex sm:items-start">
                  <div className="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-blue-100 dark:bg-blue-900 sm:mx-0 sm:h-10 sm:w-10">
                    <FingerPrintIcon className="h-6 w-6 text-blue-600 dark:text-blue-400" />
                  </div>
                  <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                    <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white">
                      Set Up Two-Factor Authentication
                    </h3>
                    <div className="mt-2">
                      {twoFAStep === 1 && (
                        <div>
                          <p className="text-sm text-gray-500 dark:text-gray-400">
                            Scan the QR code below with your authenticator app (like Google Authenticator, Authy, or Microsoft Authenticator).
                          </p>
                          <div className="mt-4 flex justify-center bg-white p-4 rounded-lg">
                            <img src={qrCodeUrl} alt="2FA QR Code" className="h-48 w-48" />
                          </div>
                          <div className="mt-4">
                            <p className="text-sm text-gray-700 dark:text-gray-300 font-medium">
                              Can't scan the QR code?
                            </p>
                            <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                              Use this code instead: <span className="font-mono font-medium">JBSWY3DPEHPK3PXP</span>
                            </p>
                          </div>
                        </div>
                      )}
                      
                      {twoFAStep === 2 && (
                        <div>
                          <p className="text-sm text-gray-500 dark:text-gray-400">
                            Enter the 6-digit verification code from your authenticator app to verify setup.
                          </p>
                          <form onSubmit={handleVerificationSubmit} className="mt-4">
                            <div className="mb-4">
                              <label htmlFor="verificationCode" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                Verification Code
                              </label>
                              <input
                                type="text"
                                id="verificationCode"
                                value={verificationCode}
                                onChange={(e) => setVerificationCode(e.target.value.replace(/\D/g, '').substring(0, 6))}
                                className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white"
                                placeholder="Enter 6-digit code"
                                maxLength={6}
                                autoComplete="off"
                                required
                              />
                            </div>
                            <div className="flex justify-end">
                              <button
                                type="submit"
                                className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary/90 focus:outline-none"
                              >
                                Verify
                              </button>
                            </div>
                          </form>
                        </div>
                      )}
                      
                      {twoFAStep === 3 && (
                        <div>
                          <p className="text-sm text-gray-500 dark:text-gray-400">
                            Save these recovery codes in a safe place. You can use them to regain access to your account if you lose your authenticator device.
                          </p>
                          <div className="mt-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <div className="flex justify-between items-center mb-2">
                              <h4 className="text-sm font-medium text-gray-900 dark:text-white">
                                Recovery Codes
                              </h4>
                              <button
                                type="button"
                                onClick={copyRecoveryCodes}
                                className="inline-flex items-center text-xs text-primary hover:text-primary/80"
                              >
                                <ClipboardDocumentIcon className="h-4 w-4 mr-1" />
                                Copy
                              </button>
                            </div>
                            <div className={`grid grid-cols-2 gap-2 ${recoveryCodesVisible ? '' : 'blur-sm hover:blur-none transition-all duration-300'}`}>
                              {recoveryCodes.map((code, index) => (
                                <div key={index} className="font-mono text-xs text-gray-800 dark:text-gray-200">
                                  {code}
                                </div>
                              ))}
                            </div>
                            <button
                              type="button"
                              onClick={() => setRecoveryCodesVisible(!recoveryCodesVisible)}
                              className="mt-2 text-xs text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"
                            >
                              {recoveryCodesVisible ? 'Hide codes' : 'Show codes'}
                            </button>
                          </div>
                          <p className="mt-4 text-sm text-red-600 dark:text-red-400">
                            <strong>Important:</strong> Without these recovery codes, you may lose access to your account if you lose your authenticator device.
                          </p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 dark:bg-gray-700 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                {twoFAStep === 1 && (
                  <button
                    type="button"
                    className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none sm:ml-3 sm:w-auto sm:text-sm"
                    onClick={() => setTwoFAStep(2)}
                  >
                    Continue
                  </button>
                )}
                
                {twoFAStep === 3 && (
                  <button
                    type="button"
                    className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none sm:ml-3 sm:w-auto sm:text-sm"
                    onClick={complete2FASetup}
                  >
                    Complete Setup
                  </button>
                )}
                
                <button
                  type="button"
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-800 text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={close2FAModal}
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </DashboardLayout>
  );
};

export default Profile; 